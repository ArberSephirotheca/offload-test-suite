#--- source.hlsl
RWStructuredBuffer<uint> _participant_check_sum : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  _participant_check_sum[tid.x] = 0;
  uint result = 0;
  if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 52))) {
    uint _perm_val_0 = ((WaveGetLaneIndex() == 63) ? 0 : ((WaveGetLaneIndex() == 62) ? 63 : ((WaveGetLaneIndex() == 61) ? 62 : ((WaveGetLaneIndex() == 60) ? 61 : ((WaveGetLaneIndex() == 59) ? 60 : ((WaveGetLaneIndex() == 58) ? 59 : ((WaveGetLaneIndex() == 57) ? 58 : ((WaveGetLaneIndex() == 56) ? 57 : ((WaveGetLaneIndex() == 55) ? 56 : ((WaveGetLaneIndex() == 54) ? 55 : ((WaveGetLaneIndex() == 53) ? 54 : ((WaveGetLaneIndex() == 52) ? 53 : ((WaveGetLaneIndex() == 13) ? 52 : ((WaveGetLaneIndex() == 12) ? 13 : ((WaveGetLaneIndex() == 11) ? 12 : ((WaveGetLaneIndex() == 10) ? 11 : ((WaveGetLaneIndex() == 9) ? 10 : ((WaveGetLaneIndex() == 8) ? 9 : ((WaveGetLaneIndex() == 7) ? 8 : ((WaveGetLaneIndex() == 6) ? 7 : ((WaveGetLaneIndex() == 5) ? 6 : ((WaveGetLaneIndex() == 4) ? 5 : ((WaveGetLaneIndex() == 3) ? 4 : ((WaveGetLaneIndex() == 2) ? 3 : ((WaveGetLaneIndex() == 1) ? 2 : 1)))))))))))))))))))))))));
    result = (result + WaveActiveSum(WaveReadLaneAt(1, _perm_val_0)));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 26);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  } else {
  if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 62))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 0);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 19);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  }
  }
  }
  if (((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 61))) {
    if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 56))) {
      result = (result + WaveActiveMin(result));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 0);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    uint counter0 = 0;
    while ((counter0 < 3)) {
      counter0 = (counter0 + 1);
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 1);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      if ((WaveGetLaneIndex() >= 63)) {
        if ((WaveGetLaneIndex() >= 34)) {
          result = (result + WaveActiveMax(result));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 0);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint _participantCount = WaveActiveSum(1);
              bool _isCorrect = (_participantCount == 0);
              _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint _participantCount = WaveActiveSum(1);
              bool _isCorrect = (_participantCount == 0);
              _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint _participantCount = WaveActiveSum(1);
              bool _isCorrect = (_participantCount == 0);
              _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
            }
            break;
          }
        }
        if ((WaveGetLaneIndex() < 15)) {
          result = (result + WaveActiveMax(result));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 0);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
      } else {
      if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 48))) {
        result = (result + WaveActiveMax(result));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 0);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 51))) {
        if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 56))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 2);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
      }
    }
    if ((counter0 == 2)) {
      break;
    }
  }
  }
  if ((WaveGetLaneIndex() == 4)) {
    if ((WaveGetLaneIndex() == 14)) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 0);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    switch ((WaveGetLaneIndex() % 2)) {
    case 0: {
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
            if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 19))) {
              result = (result + WaveActiveMin(result));
              uint _participantCount = WaveActiveSum(1);
              bool _isCorrect = (_participantCount == 0);
              _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
            }
            if ((i2 == 1)) {
              continue;
            }
          }
        }
        break;
      }
    case 1: {
        uint counter3 = 0;
        while ((counter3 < 2)) {
          counter3 = (counter3 + 1);
          if ((WaveGetLaneIndex() < 21)) {
            result = (result + WaveActiveMin(5));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 0);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
          if ((WaveGetLaneIndex() < 32)) {
            result = (result + WaveActiveMax(result));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 0);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
        }
        break;
      }
    }
    if ((WaveGetLaneIndex() == 45)) {
      result = (result + WaveActiveMax(result));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 0);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_check_sum
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 64
  - Name: expected_participants
    Format: UInt32
    Stride: 4
    Data: [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1]
Results:
  - Result: WaveOpValidation
    Rule: BufferExact
    Actual: _participant_check_sum
    Expected: expected_participants
DescriptorSets:
  - Resources:
    - Name: _participant_check_sum
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
