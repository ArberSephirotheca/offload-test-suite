

#--- source.hlsl
RWBuffer<int> Buf : register(u0);
RWBuffer<int> Zeros : register(u1);
RWBuffer<int> NegOnes : register(u2);

[numthreads(8,1,1)]
void main(uint3 TID : SV_GroupThreadID) {
  if (TID.x >= 5)
    return;

  Zeros[TID.x] = Buf[TID.x] / Zeros[TID.x];
  NegOnes[TID.x] = Buf[TID.x] / NegOnes[TID.x];
}
//--- pipeline.yaml
---
DispatchSize: [1, 1, 1]
DescriptorSets:
  - Resources:
    - Access: ReadWrite
      Format: Int32
      Data: [ 1, -1, 2147483647, -2147483648, 0]
      DirectXBinding:
        Register: 0
        Space: 0
    - Access: ReadWrite
      Format: Int32
      Data: [ 0, 0, 0, 0, 0]
      DirectXBinding:
        Register: 1
        Space: 0
    - Access: ReadWrite
      Format: Int32
      Data: [ -1, -1, -1, -1, -1]
      DirectXBinding:
        Register: 2
        Space: 0
...
#--- end

# UNSUPPORTED: Clang
# RUN: split-file %s %t
# RUN: dxc -T cs_6_0 -Fo %t.dxil %t/source.hlsl
# RUN: %gpu-exec %t/pipeline.yaml %t.dxil -warp | FileCheck %s

# REQUIRES: DirectX-WARP
# The behavior of division by zero and edge cases for division by negative one
# is undefined in HLSL with SM 6.0. WARP's behavior is different from other
# drivers so it is captured separately in this test.

# CHECK: Access: ReadWrite
# CHECK: Access: ReadWrite
# CHECK-NEXT: Format: Int32
# CHECK-NEXT: Data: [ 2147483647, 2147483647, 2147483647, 2147483647,
# CHECK-NEXT: 2147483647 ]
# CHECK: Access: ReadWrite
# CHECK-NEXT: Format: Int32
# CHECK-NEXT: Data: [ -1, 1, -2147483647, 2147483647, 0 ]
