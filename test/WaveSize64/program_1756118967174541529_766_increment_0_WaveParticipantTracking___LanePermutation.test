#--- source.hlsl
RWStructuredBuffer<uint> _participant_check_sum : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  _participant_check_sum[tid.x] = 0;
  uint result = 0;
  if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 54))) {
    uint _perm_val_0 = ((WaveGetLaneIndex() == 63) ? 0 : ((WaveGetLaneIndex() == 62) ? 63 : ((WaveGetLaneIndex() == 61) ? 62 : ((WaveGetLaneIndex() == 60) ? 61 : ((WaveGetLaneIndex() == 59) ? 60 : ((WaveGetLaneIndex() == 58) ? 59 : ((WaveGetLaneIndex() == 57) ? 58 : ((WaveGetLaneIndex() == 56) ? 57 : ((WaveGetLaneIndex() == 55) ? 56 : ((WaveGetLaneIndex() == 54) ? 55 : ((WaveGetLaneIndex() == 17) ? 54 : ((WaveGetLaneIndex() == 16) ? 17 : ((WaveGetLaneIndex() == 15) ? 16 : ((WaveGetLaneIndex() == 14) ? 15 : ((WaveGetLaneIndex() == 13) ? 14 : ((WaveGetLaneIndex() == 12) ? 13 : ((WaveGetLaneIndex() == 11) ? 12 : ((WaveGetLaneIndex() == 10) ? 11 : ((WaveGetLaneIndex() == 9) ? 10 : ((WaveGetLaneIndex() == 8) ? 9 : ((WaveGetLaneIndex() == 7) ? 8 : ((WaveGetLaneIndex() == 6) ? 7 : ((WaveGetLaneIndex() == 5) ? 6 : ((WaveGetLaneIndex() == 4) ? 5 : ((WaveGetLaneIndex() == 3) ? 4 : ((WaveGetLaneIndex() == 2) ? 3 : ((WaveGetLaneIndex() == 1) ? 2 : 1)))))))))))))))))))))))))));
    result = (result + WaveActiveSum(WaveReadLaneAt((WaveGetLaneIndex() + 1), _perm_val_0)));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 28);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  } else {
  if ((WaveGetLaneIndex() == 26)) {
    result = (result + WaveActiveMin(2));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 1);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  } else {
  if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 59))) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 1);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveSum(4));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 17);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  }
  }
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 3);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 10);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 42);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 0);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      break;
    }
  }
  if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 53))) {
    result = (result + WaveActiveSum(1));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 16);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  } else {
  if ((WaveGetLaneIndex() >= 53)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 0);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  } else {
  if ((WaveGetLaneIndex() < 1)) {
    result = (result + WaveActiveMax(3));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 0);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  } else {
  if ((WaveGetLaneIndex() < 20)) {
    result = (result + WaveActiveSum(4));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 15);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  }
  }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_check_sum
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 64
  - Name: expected_participants
    Format: UInt32
    Stride: 4
    Data: [3, 3, 3, 3, 4, 3, 3, 3, 3, 2, 4, 3, 2, 3, 3, 2, 4, 3, 2, 2, 2, 0, 3, 1, 1, 1, 2, 0, 3, 1, 1, 1, 2, 1, 3, 1, 1, 1, 2, 0, 3, 1, 1, 1, 2, 0, 3, 1, 1, 1, 2, 0, 3, 2, 2, 3, 3, 2, 4, 3, 2, 3, 3, 2]
Results:
  - Result: WaveOpValidation
    Rule: BufferExact
    Actual: _participant_check_sum
    Expected: expected_participants
DescriptorSets:
  - Resources:
    - Name: _participant_check_sum
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
