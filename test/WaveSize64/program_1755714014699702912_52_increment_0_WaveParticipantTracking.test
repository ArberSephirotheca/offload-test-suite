#--- source.hlsl
RWStructuredBuffer<uint> _participant_check_sum : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  _participant_check_sum[tid.x] = 0;
  uint result = 0;
  if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 53))) {
    if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 48))) {
      result = (result + WaveActiveSum(9));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 20);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    if ((WaveGetLaneIndex() == 7)) {
      if ((WaveGetLaneIndex() == 33)) {
        result = (result + WaveActiveSum(4));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 0);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if ((((WaveGetLaneIndex() == 28) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 11))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 0);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
        if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 18))) {
          result = (result + WaveActiveMax(6));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 0);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
      }
    }
  } else {
  if (((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 39))) {
    result = (result + WaveActiveSum(result));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 2);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  }
  for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
    if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 17))) {
      if (((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 12))) {
        result = (result + WaveActiveMax(10));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 0);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
    } else {
    if ((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 61))) {
      result = (result + WaveActiveSum(result));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 2);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 49))) {
      result = (result + WaveActiveMin(result));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 3);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveMin(result));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 22);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  }
  if ((i1 == 2)) {
    break;
  }
  }
  if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 52))) {
    result = (result + WaveActiveMax(result));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 3);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_check_sum
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 64
  - Name: expected_participants
    Format: UInt32
    Stride: 4
    Data: [1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 0, 3, 0, 4, 0, 3, 1, 3, 0, 3, 0, 3, 3, 3, 3, 3, 0, 3, 0, 3, 0, 4, 3, 3, 0, 3, 0, 3, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 6, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Results:
  - Result: WaveOpValidation
    Rule: BufferExact
    Actual: _participant_check_sum
    Expected: expected_participants
DescriptorSets:
  - Resources:
    - Name: _participant_check_sum
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
