#--- source.hlsl
RWStructuredBuffer<uint> _participant_check_sum : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  _participant_check_sum[tid.x] = 0;
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 5))) {
            if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 4))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint _participantCount = WaveActiveSum(1);
              bool _isCorrect = (_participantCount == 0);
              _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
            }
            if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 10))) {
              if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 12))) {
                result = (result + WaveActiveMin(result));
                uint _participantCount = WaveActiveSum(1);
                bool _isCorrect = (_participantCount == 0);
                _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
              }
              if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 19))) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
                uint _participantCount = WaveActiveSum(1);
                bool _isCorrect = (_participantCount == 0);
                _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
              }
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 0);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
          break;
        }
      case 2: {
          if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 23))) {
            if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 30))) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint _participantCount = WaveActiveSum(1);
              bool _isCorrect = (_participantCount == 0);
              _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
            }
            switch ((WaveGetLaneIndex() % 2)) {
            case 0: {
                if ((WaveGetLaneIndex() < 8)) {
                  result = (result + WaveActiveSum(1));
                  uint _participantCount = WaveActiveSum(1);
                  bool _isCorrect = (_participantCount == 0);
                  _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
                }
                break;
              }
            case 1: {
                if (((WaveGetLaneIndex() % 2) == 0)) {
                  result = (result + WaveActiveSum(2));
                  uint _participantCount = WaveActiveSum(1);
                  bool _isCorrect = (_participantCount == 0);
                  _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
                }
                break;
              }
            }
            if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 28))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint _participantCount = WaveActiveSum(1);
              bool _isCorrect = (_participantCount == 0);
              _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
            }
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 5);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 10);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      break;
    }
  }
  if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 23))) {
    result = (result + WaveActiveSum(1));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 11);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  } else {
  if ((WaveGetLaneIndex() == 19)) {
    result = (result + WaveActiveMin(2));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 1);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  }
  }
  if ((((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 31))) {
    if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 27))) {
      result = (result + WaveActiveSum(result));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 0);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    uint counter0 = 0;
    while ((counter0 < 3)) {
      counter0 = (counter0 + 1);
      if ((WaveGetLaneIndex() == 2)) {
        result = (result + WaveActiveSum(result));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 0);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 21))) {
        if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 21))) {
          result = (result + WaveActiveSum(result));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 0);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
      } else {
      if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 23))) {
        result = (result + WaveActiveSum(2));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 3);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
    }
    if ((counter0 == 2)) {
      break;
    }
  }
  } else {
  if ((WaveGetLaneIndex() == 29)) {
    result = (result + WaveActiveMin(WaveGetLaneIndex()));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 1);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  }
  uint counter1 = 0;
  while ((counter1 < 3)) {
    counter1 = (counter1 + 1);
    uint counter2 = 0;
    while ((counter2 < 3)) {
      counter2 = (counter2 + 1);
      if ((WaveGetLaneIndex() >= 22)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 7);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
    }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_check_sum
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 64
  - Name: expected_participants
    Format: UInt32
    Stride: 4
    Data: [1, 1, 1, 0, 1, 1, 0, 2, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 11, 10, 3, 11, 10, 11, 12, 10, 3, 1, 1, 1, 0, 1, 1, 0, 2, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 11, 10, 3, 11, 10, 11, 12, 10, 3]
Results:
  - Result: WaveOpValidation
    Rule: BufferExact
    Actual: _participant_check_sum
    Expected: expected_participants
DescriptorSets:
  - Resources:
    - Name: _participant_check_sum
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
