name: HLSL Test

permissions:
  contents: read
  checks: write

on:
  workflow_dispatch:
    inputs:
      HLSLTest-branch:
        description: 'Test Suite Branch'
        required: false
        default: 'main'
        type: string
      LLVM-branch:
        description: 'LLVM Branch'
        required: false
        default: 'main'
        type: string
      DXC-branch:
        description: 'DXC Branch'
        required: false
        default: 'main'
        type: string
      Test-Clang:
        required: true
        type: choice
        options:
        - On
        - Off
      OS:
        required: true
        type: choice
        options:
        - macOS
        - windows
  workflow_call:
    inputs:
      HLSLTest-branch:
        description: 'Test Suite Branch'
        required: false
        default: 'main'
        type: string
      LLVM-branch:
        description: 'LLVM Branch'
        required: false
        default: 'main'
        type: string
      DXC-branch:
        description: 'DXC Branch'
        required: false
        default: 'main'
        type: string
      OS:
        required: true
        type: string
      Test-Clang:
        required: false
        default: 'On'
        type: string

jobs:
  build:
    runs-on: [self-hosted, "${{ inputs.OS }}"]
    steps:
      - name: Checkout DXC
        uses: actions/checkout@v4
        with:
          repository: Microsoft/DirectXShaderCompiler
          ref: ${{ inputs.DXC-branch }}
          path: DXC
          fetch-depth: 1
          submodules: true
      - name: Checkout LLVM
        uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          ref: ${{ inputs.LLVM-branch }}
          path: llvm-project
          fetch-depth: 1
      - name: Checkout HLSLTest
        uses: actions/checkout@v4
        with:
          repository: llvm-beanz/HLSLTest
          ref: ${{ inputs.HLSLTest-branch }}
          path: HLSLTest
          fetch-depth: 1
      - name: Setup Windows
        if: inputs.OS == 'windows'
        uses: llvm/actions/setup-windows@main
        with:
          arch: amd64
      - name: Setup Python env
        uses: actions/setup-python@v5
        with:
          cache: 'pip'
          cache-dependency-path: '${{ github.workspace }}/HLSLTest/test/requirements.txt'
      - name: Install Python Deps
        run: pip install -r ${{ github.workspace }}/HLSLTest/test/requirements.txt
      - name: Build DXC
        run: |
            cd DXC
            mkdir build
            cd build
            cmake -G Ninja -DCMAKE_POLICY_DEFAULT_CMP0141=NEW -DCMAKE_BUILD_TYPE=Release -C ${{ github.workspace }}/DXC/cmake/caches/PredefinedParams.cmake -C ${{ github.workspace }}/HLSLTest/cmake/caches/sccache.cmake ${{ github.workspace }}/DXC/
            ninja
      - name: Build LLVM
        run: |
            cd llvm-project
            mkdir build
            cd build
            cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -C ${{ github.workspace }}/llvm-project/clang/cmake/caches/HLSL.cmake -C ${{ github.workspace }}/HLSLTest/cmake/caches/sccache.cmake -DDIRECTX_HEADERS_PATH=${{ github.workspace }}/DXC/external/DirectX-Headers -DDXC_BUILD_DIR=${{ github.workspace }}/DXC/build/bin -DLLVM_EXTERNAL_HLSLTEST_SOURCE_DIR=${{ github.workspace }}/HLSLTest -DLLVM_EXTERNAL_PROJECTS="HLSLTest" -DLLVM_LIT_ARGS="--xunit-xml-output=testresults.xunit.xml -v" -DHLSLTEST_TEST_CLANG=${{ inputs.Test-Clang }} ${{ github.workspace }}/llvm-project/llvm/
            ninja hlsl-test-depends
      - name: Run HLSL Tests
        run: |
            cd llvm-project
            cd build
            ninja check-hlsl
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/macos@v2
        if: always()
        with:
          comment_mode: off
          files: llvm-project/build/**/testresults.xunit.xml
