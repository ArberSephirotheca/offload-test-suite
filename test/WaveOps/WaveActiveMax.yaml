# RUN: %if DirectX %{ dxc -T cs_6_0 -Fo %t.dxil %S/Inputs/WaveActiveMax.hlsl %}
# RUN: %if DirectX %{ %gpu-exec %s %t.dxil | FileCheck %s %}
# RUN: %if DirectX-WARP %{ %gpu-exec %s %t.dxil -warp | FileCheck %s %}
# RUN: %if Vulkan %{ dxc -T cs_6_0 -spirv -fspv-target-env=vulkan1.1 -Fo %t.spv %S/Inputs/WaveActiveMax.hlsl %}
# RUN: %if Vulkan %{ %gpu-exec %s %t.spv | FileCheck %s --check-prefixes=CHECK,VULKAN %}
# RUN: %if Metal %{ dxc -T cs_6_0 -Fo %t.dxil %S/Inputs/WaveActiveMax.hlsl %}
# RUN: %if Metal %{ metal-shaderconverter %t.dxil -o=%t.metallib %}
# RUN: %if Metal %{ %gpu-exec %s %t.metallib | FileCheck %s --check-prefixes=CHECK,METAL %}

# The behavior of this operation is well-defined on Vulkan and Metal, but not
# well-defined for DirectX. This test ensures that we get the defined output on
# Vulkan and Metal, and it just verifies something ran on DX.

---
DispatchSize: [1, 1, 1]
DescriptorSets:
  - Resources:
    - Access: ReadWrite
      Format: Float32
      Data: [ nan, nan, nan, nan ]
      DirectXBinding:
        Register: 0
        Space: 0
    - Access: ReadWrite
      Format: Float32
      Data: [ inf, inf, inf, inf ]
      DirectXBinding:
        Register: 1
        Space: 0
    - Access: ReadWrite
      Format: Float32
      Data: [ -inf, -inf, -inf, -inf ]
      DirectXBinding:
        Register: 2
        Space: 0
    - Access: ReadWrite
      Format: Float32
      Data: [ inf, -inf, nan, 0 ]
      DirectXBinding:
        Register: 3
        Space: 0
...

# CHECK: Access:          ReadWrite
# CHECK-NEXT: Format:          Float32
# METAL-NEXT: Data:            [ 0, 0, 0, 0 ]
# VULKAN-NEXT: Data:            [ nan, nan, nan, nan ]
# CHECK: Access:          ReadWrite
# CHECK-NEXT: Format:          Float32
# METAL-NEXT: Data:            [ inf, inf, inf, inf ]
# VULKAN-NEXT: Data:            [ inf, inf, inf, inf ]
# CHECK: Access:          ReadWrite
# CHECK-NEXT: Format:          Float32
# METAL-NEXT: Data:            [ 0, 0, 0, 0 ]
# VULKAN-NEXT: Data:            [ -inf, -inf, -inf, -inf ]
# CHECK: Access:          ReadWrite
# CHECK-NEXT: Format:          Float32
# METAL-NEXT: Data:            [ inf, inf, inf, inf ]
# VULKAN-NEXT: Data:            [ inf, inf, inf, inf ]
