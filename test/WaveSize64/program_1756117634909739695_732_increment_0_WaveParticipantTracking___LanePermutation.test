#--- source.hlsl
RWStructuredBuffer<uint> _participant_check_sum : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  _participant_check_sum[tid.x] = 0;
  uint result = 0;
  if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 47))) {
    uint _perm_val_0 = ((WaveGetLaneIndex() == 63) ? 0 : ((WaveGetLaneIndex() == 62) ? 63 : ((WaveGetLaneIndex() == 61) ? 62 : ((WaveGetLaneIndex() == 60) ? 61 : ((WaveGetLaneIndex() == 59) ? 60 : ((WaveGetLaneIndex() == 58) ? 59 : ((WaveGetLaneIndex() == 57) ? 58 : ((WaveGetLaneIndex() == 56) ? 57 : ((WaveGetLaneIndex() == 55) ? 56 : ((WaveGetLaneIndex() == 54) ? 55 : ((WaveGetLaneIndex() == 53) ? 54 : ((WaveGetLaneIndex() == 52) ? 53 : ((WaveGetLaneIndex() == 51) ? 52 : ((WaveGetLaneIndex() == 50) ? 51 : ((WaveGetLaneIndex() == 49) ? 50 : ((WaveGetLaneIndex() == 48) ? 49 : ((WaveGetLaneIndex() == 47) ? 48 : ((WaveGetLaneIndex() == 17) ? 47 : ((WaveGetLaneIndex() == 16) ? 17 : ((WaveGetLaneIndex() == 15) ? 16 : ((WaveGetLaneIndex() == 14) ? 15 : ((WaveGetLaneIndex() == 13) ? 14 : ((WaveGetLaneIndex() == 12) ? 13 : ((WaveGetLaneIndex() == 11) ? 12 : ((WaveGetLaneIndex() == 10) ? 11 : ((WaveGetLaneIndex() == 9) ? 10 : ((WaveGetLaneIndex() == 8) ? 9 : ((WaveGetLaneIndex() == 7) ? 8 : ((WaveGetLaneIndex() == 6) ? 7 : ((WaveGetLaneIndex() == 5) ? 6 : ((WaveGetLaneIndex() == 4) ? 5 : ((WaveGetLaneIndex() == 3) ? 4 : ((WaveGetLaneIndex() == 2) ? 3 : ((WaveGetLaneIndex() == 1) ? 2 : 1))))))))))))))))))))))))))))))))));
    result = (result + WaveActiveSum(WaveReadLaneAt((WaveGetLaneIndex() + 1), _perm_val_0)));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 35);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMin(2));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 15);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 0);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  }
  }
  }
  uint counter0 = 0;
  while ((counter0 < 3)) {
    counter0 = (counter0 + 1);
    if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 60))) {
      result = (result + WaveActiveMin(WaveGetLaneIndex()));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 3);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    if (((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 49))) {
      result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 2);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    if ((counter0 == 2)) {
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_check_sum
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 64
  - Name: expected_participants
    Format: UInt32
    Stride: 4
    Data: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1]
Results:
  - Result: WaveOpValidation
    Rule: BufferExact
    Actual: _participant_check_sum
    Expected: expected_participants
DescriptorSets:
  - Resources:
    - Name: _participant_check_sum
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
