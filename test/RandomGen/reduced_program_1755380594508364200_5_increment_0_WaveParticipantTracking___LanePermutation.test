#--- source.hlsl
RWStructuredBuffer<uint> _participant_check_sum : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  _participant_check_sum[tid.x] = 0;
  uint result = 0;
 
    if (((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 18))) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 2);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
}


  switch ((WaveGetLaneIndex() % 3)) {
  case 1: {
    switch ((WaveGetLaneIndex() % 3)) {
  case 1: {
    uint counter0 = 0;
    while ((counter0 < 2)) {
  counter0 = (counter0 + 1);
  if ((WaveGetLaneIndex() >= 20)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 4);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
}
}
    break;
  }
}
    break;
  }
}
  switch ((WaveGetLaneIndex() % 3)) {
  case 1: {
    for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
    if (((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 27))) {
    result = (result + WaveActiveMax(result));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 0);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
}
}
    break;
  }
}
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
    if ((WaveGetLaneIndex() < 8)) {
    result = (result + WaveActiveSum(1));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 3);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
}
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
    result = (result + WaveActiveSum(2));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 5);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
}
    break;
  }
  case 2: {
    uint counter3 = 0;
    while ((counter3 < 2)) {
  counter3 = (counter3 + 1);
  if ((WaveGetLaneIndex() == 13)) {
    if ((WaveGetLaneIndex() == 15)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 0);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
}
    if ((WaveGetLaneIndex() == 6)) {
    result = (result + WaveActiveSum(result));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 0);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
}
}
  if ((counter3 == 1)) {
    break;
}
}
    break;
  }
}
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_check_sum
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 64
  - Name: expected_participants
    Format: UInt32
    Stride: 4
    Data: [3, 0, 1, 3, 2, 1, 3, 0, 1, 1, 1, 1, 0, 0, 3, 1, 1, 2, 1, 0, 2, 0, 3, 1, 0, 2, 1, 0, 3, 2, 0, 2, 3, 0, 1, 3, 2, 1, 3, 0, 1, 1, 1, 1, 0, 0, 3, 1, 1, 2, 1, 0, 2, 0, 3, 1, 0, 2, 1, 0, 3, 2, 0, 2]
Results:
  - Result: WaveOpValidation
    Rule: BufferExact
    Actual: _participant_check_sum
    Expected: expected_participants
DescriptorSets:
  - Resources:
    - Name: _participant_check_sum
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
