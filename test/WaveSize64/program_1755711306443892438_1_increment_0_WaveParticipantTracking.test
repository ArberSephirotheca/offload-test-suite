#--- source.hlsl
RWStructuredBuffer<uint> _participant_check_sum : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  _participant_check_sum[tid.x] = 0;
  uint result = 0;
  for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
    if ((WaveGetLaneIndex() >= 46)) {
      result = (result + WaveActiveMin(3));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 18);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
      if ((WaveGetLaneIndex() == 0)) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 1);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 51))) {
        if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 51))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 2);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
        if (((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 54))) {
          result = (result + WaveActiveMin(result));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 0);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
      }
      if ((WaveGetLaneIndex() == 39)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 1);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      if ((i1 == 2)) {
        break;
      }
    }
    if ((WaveGetLaneIndex() < 7)) {
      result = (result + WaveActiveMin(4));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 7);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    if ((i0 == 1)) {
      continue;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() < 28)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 14);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
        if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 52))) {
          if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 58))) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 9);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
          if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 50))) {
            result = (result + WaveActiveMin(result));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 12);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
        } else {
        if ((WaveGetLaneIndex() < 24)) {
          result = (result + WaveActiveMax(1));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 6);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 0);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 0);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_check_sum
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 64
  - Name: expected_participants
    Format: UInt32
    Stride: 4
    Data: [14, 2, 8, 2, 8, 2, 8, 0, 6, 0, 6, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 8, 4, 2, 4, 2, 4, 2, 6, 2, 6, 2, 6, 2]
Results:
  - Result: WaveOpValidation
    Rule: BufferExact
    Actual: _participant_check_sum
    Expected: expected_participants
DescriptorSets:
  - Resources:
    - Name: _participant_check_sum
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
