#--- source.hlsl
RWStructuredBuffer<uint> _participant_check_sum : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  _participant_check_sum[tid.x] = 0;
  uint result = 0;
  if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 53))) {
    if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 52))) {
      result = (result + WaveActiveSum(result));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 22);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    uint counter0 = 0;
    while ((counter0 < 3)) {
      counter0 = (counter0 + 1);
      if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 49))) {
        result = (result + WaveActiveMax(1));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 1);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 52))) {
          result = (result + WaveActiveMin(result));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 13);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
      }
    }
  } else {
  if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 30))) {
    result = (result + WaveActiveMax(result));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 3);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  }
  uint counter2 = 0;
  while ((counter2 < 3)) {
    counter2 = (counter2 + 1);
    for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
      if ((((WaveGetLaneIndex() == 22) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 42))) {
        if ((((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 15))) {
          result = (result + WaveActiveMax(result));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 0);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
        if ((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 11))) {
          result = (result + WaveActiveSum(result));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 0);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
      } else {
      if (((WaveGetLaneIndex() == 22) || (WaveGetLaneIndex() == 45))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 1);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
    }
  }
  if ((((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 42))) {
    result = (result + WaveActiveMin(result));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 2);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  }
  }
  if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 61))) {
    result = (result + WaveActiveMax(7));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 0);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_check_sum
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 64
  - Name: expected_participants
    Format: UInt32
    Stride: 4
    Data: [10, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 9, 0, 0, 0, 0, 1, 0, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
Results:
  - Result: WaveOpValidation
    Rule: BufferExact
    Actual: _participant_check_sum
    Expected: expected_participants
DescriptorSets:
  - Resources:
    - Name: _participant_check_sum
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
