#--- source.hlsl
RWStructuredBuffer<uint> _participant_check_sum : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  _participant_check_sum[tid.x] = 0;
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 0)) {
    uint _perm_val_0 = ((WaveGetLaneIndex() == 62) ? 0 : ((WaveGetLaneIndex() == 60) ? 62 : ((WaveGetLaneIndex() == 58) ? 60 : ((WaveGetLaneIndex() == 56) ? 58 : ((WaveGetLaneIndex() == 54) ? 56 : ((WaveGetLaneIndex() == 52) ? 54 : ((WaveGetLaneIndex() == 50) ? 52 : ((WaveGetLaneIndex() == 48) ? 50 : ((WaveGetLaneIndex() == 46) ? 48 : ((WaveGetLaneIndex() == 44) ? 46 : ((WaveGetLaneIndex() == 42) ? 44 : ((WaveGetLaneIndex() == 40) ? 42 : ((WaveGetLaneIndex() == 38) ? 40 : ((WaveGetLaneIndex() == 36) ? 38 : ((WaveGetLaneIndex() == 34) ? 36 : ((WaveGetLaneIndex() == 32) ? 34 : ((WaveGetLaneIndex() == 30) ? 32 : ((WaveGetLaneIndex() == 28) ? 30 : ((WaveGetLaneIndex() == 26) ? 28 : ((WaveGetLaneIndex() == 24) ? 26 : ((WaveGetLaneIndex() == 22) ? 24 : ((WaveGetLaneIndex() == 20) ? 22 : ((WaveGetLaneIndex() == 18) ? 20 : ((WaveGetLaneIndex() == 16) ? 18 : ((WaveGetLaneIndex() == 14) ? 16 : ((WaveGetLaneIndex() == 12) ? 14 : ((WaveGetLaneIndex() == 10) ? 12 : ((WaveGetLaneIndex() == 8) ? 10 : ((WaveGetLaneIndex() == 6) ? 8 : ((WaveGetLaneIndex() == 4) ? 6 : ((WaveGetLaneIndex() == 2) ? 4 : 2)))))))))))))))))))))))))))))));
    result = (result + WaveActiveSum(WaveReadLaneAt(1, _perm_val_0)));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 32);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  } else {
  if ((WaveGetLaneIndex() == 16)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 0);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 4);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 1);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 0);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
          break;
        }
      case 2: {
          if ((WaveGetLaneIndex() == 63)) {
            if ((WaveGetLaneIndex() == 61)) {
              result = (result + WaveActiveMax(result));
              uint _participantCount = WaveActiveSum(1);
              bool _isCorrect = (_participantCount == 0);
              _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
            }
          }
          break;
        }
      }
      break;
    }
  }
  if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 55))) {
    if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 60))) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 7);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_check_sum
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 64
  - Name: expected_participants
    Format: UInt32
    Stride: 4
    Data: [3, 1, 3, 1, 2, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 1, 2, 1]
Results:
  - Result: WaveOpValidation
    Rule: BufferExact
    Actual: _participant_check_sum
    Expected: expected_participants
DescriptorSets:
  - Resources:
    - Name: _participant_check_sum
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
