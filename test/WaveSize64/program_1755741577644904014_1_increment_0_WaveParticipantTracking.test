#--- source.hlsl
RWStructuredBuffer<uint> _participant_check_sum : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  _participant_check_sum[tid.x] = 0;
  uint result = 0;
  for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
    if (((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 52))) {
      result = (result + WaveActiveSum(result));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 4);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    if (((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 40))) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 2);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
  }
  for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
    if ((WaveGetLaneIndex() < 10)) {
      result = (result + WaveActiveMax(result));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 10);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    if ((WaveGetLaneIndex() >= 61)) {
      if ((WaveGetLaneIndex() < 23)) {
        result = (result + WaveActiveSum(result));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 0);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 54))) {
        if (((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 62))) {
          result = (result + WaveActiveMin(9));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 0);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
      }
    } else {
    if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 41))) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 4);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMax(result));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 31);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMin(result));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 0);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
    }
  }
  if ((WaveGetLaneIndex() >= 43)) {
    result = (result + WaveActiveSum(8));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 21);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  }
  }
  if (((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 45))) {
    for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
      if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 59)) || (WaveGetLaneIndex() == 16))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 0);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      uint counter3 = 0;
      while ((counter3 < 3)) {
        counter3 = (counter3 + 1);
        if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 58))) {
          result = (result + WaveActiveMin(result));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 1);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
        if ((counter3 == 2)) {
          break;
        }
      }
      if ((((WaveGetLaneIndex() == 27) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 36))) {
        result = (result + WaveActiveMax(result));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 0);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      if ((i2 == 1)) {
        break;
      }
    }
    if ((((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 42))) {
      result = (result + WaveActiveMax(result));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 0);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_check_sum
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 64
  - Name: expected_participants
    Format: UInt32
    Stride: 4
    Data: [4, 2, 4, 4, 4, 2, 4, 2, 4, 8, 2, 0, 4, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 4, 2, 2, 2, 6, 2, 4, 2, 4, 2, 4, 2, 6, 2, 4, 2, 4, 2, 4, 2, 4, 2, 2, 2]
Results:
  - Result: WaveOpValidation
    Rule: BufferExact
    Actual: _participant_check_sum
    Expected: expected_participants
DescriptorSets:
  - Resources:
    - Name: _participant_check_sum
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
