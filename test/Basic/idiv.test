#--- source.hlsl
RWBuffer<int> Buf : register(u0);
RWBuffer<int> Zeros : register(u1);
RWBuffer<int> NegOnes : register(u2);

[numthreads(8,1,1)]
void main(uint3 TID : SV_GroupThreadID) {
  if (TID.x >= 5)
    return;

  Zeros[TID.x] = Buf[TID.x] / Zeros[TID.x];
  NegOnes[TID.x] = Buf[TID.x] / NegOnes[TID.x];
}
//--- pipeline.yaml
---
DispatchSize: [1, 1, 1]
DescriptorSets:
  - Resources:
    - Access: ReadWrite
      Format: Int32
      Data: [ 1, -1, 2147483647, -2147483648, 0]
      DirectXBinding:
        Register: 0
        Space: 0
    - Access: ReadWrite
      Format: Int32
      Data: [ 0, 0, 0, 0, 0]
      DirectXBinding:
        Register: 1
        Space: 0
    - Access: ReadWrite
      Format: Int32
      Data: [ -1, -1, -1, -1, -1]
      DirectXBinding:
        Register: 2
        Space: 0
...
#--- end

# UNSUPPORTED: Clang
# XFAIL: DirectX-WARP
# RUN: split-file %s %t
# RUN: %if DirectX %{ dxc -T cs_6_0 -Fo %t.dxil %t/source.hlsl %}
# RUN: %if DirectX %{ %gpu-exec %t/pipeline.yaml %t.dxil | FileCheck %s %}
# RUN: %if Vulkan %{ dxc -T cs_6_0 -spirv -Fo %t.spv %t/source.hlsl %}
# RUN: %if Vulkan %{ %gpu-exec %t/pipeline.yaml %t.spv | FileCheck %s %}
# RUN: %if Metal %{ dxc -T cs_6_0 -Fo %t.dxil %t/source.hlsl %}
# RUN: %if Metal %{ metal-shaderconverter %t.dxil -o=%t.metallib %}
# RUN: %if Metal %{ %gpu-exec %t/pipeline.yaml %t.metallib | FileCheck %s %}

# XFAIL: DirectX-Intel
# On Intel drivers N/0 returns INT_MAX for N >= 0, and INT_MIN for N < 0.
# Oddly enough, Vulkan-Intel works just fine...

# XFAIL: Metal
# On Metal 0/0 = 0, but other platforms n/0 = -1.

# CHECK: Access: ReadWrite
# CHECK: Access: ReadWrite
# CHECK-NEXT: Format: Int32
# CHECK-NEXT: Data: [ -1, -1, -1, -1, -1 ]
# CHECK: Access: ReadWrite
# CHECK-NEXT: Format: Int32
# CHECK-NEXT: Data: [ -1, 1, -2147483647, -2147483648, 0 ]
