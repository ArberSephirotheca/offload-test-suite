#--- source.hlsl
RWStructuredBuffer<uint> _participant_check_sum : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  _participant_check_sum[tid.x] = 0;
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if ((WaveGetLaneIndex() == 60)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 1);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
        if ((WaveGetLaneIndex() == 57)) {
          if ((WaveGetLaneIndex() == 33)) {
            result = (result + WaveActiveSum(result));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 0);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
        }
      }
    }
  case 1: {
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 59))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 8);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
        if (((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 51))) {
          if ((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 50))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 0);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
          if (((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 47))) {
            result = (result + WaveActiveMax(result));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 0);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
        }
        if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 47))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 21);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
        if ((i1 == 2)) {
          break;
        }
      }
    }
  case 2: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 43))) {
            if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 54))) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint _participantCount = WaveActiveSum(1);
              bool _isCorrect = (_participantCount == 0);
              _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
            }
            if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 51))) {
              result = (result + WaveActiveMax(result));
              uint _participantCount = WaveActiveSum(1);
              bool _isCorrect = (_participantCount == 0);
              _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
            }
          } else {
          if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 45))) {
            result = (result + WaveActiveSum(7));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 12);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
        }
        break;
      }
    case 1: {
        uint counter2 = 0;
        while ((counter2 < 2)) {
          counter2 = (counter2 + 1);
          if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 57))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 8);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
          if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 45))) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 12);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
        }
        break;
      }
    case 2: {
        for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
          if ((WaveGetLaneIndex() < 15)) {
            result = (result + WaveActiveMin(result));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 5);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
          if ((i3 == 1)) {
            continue;
          }
          if ((i3 == 1)) {
            break;
          }
        }
        break;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 0);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_check_sum
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 64
  - Name: expected_participants
    Format: UInt32
    Stride: 4
    Data: [7, 10, 2, 7, 10, 2, 7, 7, 2, 4, 7, 2, 4, 7, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 4, 5, 0, 4, 5, 0, 4, 5, 0, 4, 7, 0, 10, 10, 0, 7]
Results:
  - Result: WaveOpValidation
    Rule: BufferExact
    Actual: _participant_check_sum
    Expected: expected_participants
DescriptorSets:
  - Resources:
    - Name: _participant_check_sum
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
