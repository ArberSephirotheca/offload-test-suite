#--- source.hlsl
RWStructuredBuffer<uint> _participant_check_sum : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  _participant_check_sum[tid.x] = 0;
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 1)) {
    uint _perm_val_0 = ((WaveGetLaneIndex() == 63) ? 1 : ((WaveGetLaneIndex() == 61) ? 63 : ((WaveGetLaneIndex() == 59) ? 61 : ((WaveGetLaneIndex() == 57) ? 59 : ((WaveGetLaneIndex() == 55) ? 57 : ((WaveGetLaneIndex() == 53) ? 55 : ((WaveGetLaneIndex() == 51) ? 53 : ((WaveGetLaneIndex() == 49) ? 51 : ((WaveGetLaneIndex() == 47) ? 49 : ((WaveGetLaneIndex() == 45) ? 47 : ((WaveGetLaneIndex() == 43) ? 45 : ((WaveGetLaneIndex() == 41) ? 43 : ((WaveGetLaneIndex() == 39) ? 41 : ((WaveGetLaneIndex() == 37) ? 39 : ((WaveGetLaneIndex() == 35) ? 37 : ((WaveGetLaneIndex() == 33) ? 35 : ((WaveGetLaneIndex() == 31) ? 33 : ((WaveGetLaneIndex() == 29) ? 31 : ((WaveGetLaneIndex() == 27) ? 29 : ((WaveGetLaneIndex() == 25) ? 27 : ((WaveGetLaneIndex() == 23) ? 25 : ((WaveGetLaneIndex() == 21) ? 23 : ((WaveGetLaneIndex() == 19) ? 21 : ((WaveGetLaneIndex() == 17) ? 19 : ((WaveGetLaneIndex() == 15) ? 17 : ((WaveGetLaneIndex() == 13) ? 15 : ((WaveGetLaneIndex() == 11) ? 13 : ((WaveGetLaneIndex() == 9) ? 11 : ((WaveGetLaneIndex() == 7) ? 9 : ((WaveGetLaneIndex() == 5) ? 7 : ((WaveGetLaneIndex() == 3) ? 5 : 3)))))))))))))))))))))))))))))));
    result = (result + WaveActiveSum(WaveReadLaneAt(1, _perm_val_0)));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 32);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  } else {
  if ((WaveGetLaneIndex() == 51)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 0);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  } else {
  if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 63))) {
    result = (result + WaveActiveMax(3));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 2);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  } else {
  if ((WaveGetLaneIndex() == 3)) {
    result = (result + WaveActiveSum(4));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 0);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  } else {
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveMin(5));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 0);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  }
  }
  }
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 4);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 32);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      break;
    }
  }
  for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
    if ((WaveGetLaneIndex() < 22)) {
      result = (result + WaveActiveMin(result));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 22);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 49))) {
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if ((WaveGetLaneIndex() == 8)) {
          result = (result + WaveActiveMax(result));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 0);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
        if ((WaveGetLaneIndex() == 5)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 1);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
      }
    } else {
    if ((WaveGetLaneIndex() < 25)) {
      result = (result + WaveActiveMin(result));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 18);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    if (((WaveGetLaneIndex() == 22) || (WaveGetLaneIndex() == 42))) {
      if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 53))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 0);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
    }
  }
  if ((WaveGetLaneIndex() >= 53)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint _participantCount = WaveActiveSum(1);
    bool _isCorrect = (_participantCount == 11);
    _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_check_sum
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 64
  - Name: expected_participants
    Format: UInt32
    Stride: 4
    Data: [5, 3, 5, 3, 4, 7, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
Results:
  - Result: WaveOpValidation
    Rule: BufferExact
    Actual: _participant_check_sum
    Expected: expected_participants
DescriptorSets:
  - Resources:
    - Name: _participant_check_sum
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
