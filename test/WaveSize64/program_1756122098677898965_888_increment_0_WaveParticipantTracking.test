#--- source.hlsl
RWStructuredBuffer<uint> _participant_check_sum : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  _participant_check_sum[tid.x] = 0;
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 56)) || (WaveGetLaneIndex() == 62))) {
          result = (result + WaveActiveMax(result));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 2);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 55))) {
          if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 55))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 3);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
        }
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 0);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
          break;
        }
      case 1: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              uint counter1 = 0;
              while ((counter1 < 2)) {
                counter1 = (counter1 + 1);
                if (((WaveGetLaneIndex() == 27) || (WaveGetLaneIndex() == 58))) {
                  result = (result + WaveActiveSum(5));
                  uint _participantCount = WaveActiveSum(1);
                  bool _isCorrect = (_participantCount == 0);
                  _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
                }
                if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 57))) {
                  result = (result + WaveActiveSum(WaveGetLaneIndex()));
                  uint _participantCount = WaveActiveSum(1);
                  bool _isCorrect = (_participantCount == 0);
                  _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
                }
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() & 1) == 0)) {
                if (((WaveGetLaneIndex() & 1) == 0)) {
                  result = (result + WaveActiveSum(result));
                  uint _participantCount = WaveActiveSum(1);
                  bool _isCorrect = (_participantCount == 0);
                  _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
                }
              } else {
              if ((WaveGetLaneIndex() == 17)) {
                result = (result + WaveActiveMax(result));
                uint _participantCount = WaveActiveSum(1);
                bool _isCorrect = (_participantCount == 0);
                _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
              }
            }
            break;
          }
        case 2: {
            for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
              if ((WaveGetLaneIndex() >= 35)) {
                result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
                uint _participantCount = WaveActiveSum(1);
                bool _isCorrect = (_participantCount == 0);
                _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
              }
              if ((WaveGetLaneIndex() >= 41)) {
                result = (result + WaveActiveMin(result));
                uint _participantCount = WaveActiveSum(1);
                bool _isCorrect = (_participantCount == 0);
                _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
              }
              if ((i2 == 2)) {
                break;
              }
            }
            break;
          }
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint _participantCount = WaveActiveSum(1);
          bool _isCorrect = (_participantCount == 5);
          _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
        }
        break;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 16);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    break;
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint _participantCount = WaveActiveSum(1);
      bool _isCorrect = (_participantCount == 5);
      _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 2);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint _participantCount = WaveActiveSum(1);
        bool _isCorrect = (_participantCount == 0);
        _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
      }
      break;
    }
  case 2: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
            if ((WaveGetLaneIndex() == 43)) {
              result = (result + WaveActiveSum(result));
              uint _participantCount = WaveActiveSum(1);
              bool _isCorrect = (_participantCount == 0);
              _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
            }
            uint counter4 = 0;
            while ((counter4 < 3)) {
              counter4 = (counter4 + 1);
              if ((WaveGetLaneIndex() < 32)) {
                result = (result + WaveActiveSum(result));
                uint _participantCount = WaveActiveSum(1);
                bool _isCorrect = (_participantCount == 3);
                _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
              }
            }
            if ((WaveGetLaneIndex() == 60)) {
              result = (result + WaveActiveMin(result));
              uint _participantCount = WaveActiveSum(1);
              bool _isCorrect = (_participantCount == 0);
              _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
            }
          }
          break;
        }
      case 1: {
          for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveSum(result));
              uint _participantCount = WaveActiveSum(1);
              bool _isCorrect = (_participantCount == 0);
              _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
            }
            uint counter6 = 0;
            while ((counter6 < 2)) {
              counter6 = (counter6 + 1);
              if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 44))) {
                result = (result + WaveActiveMin(5));
                uint _participantCount = WaveActiveSum(1);
                bool _isCorrect = (_participantCount == 0);
                _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
              }
              if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 60))) {
                result = (result + WaveActiveMax(result));
                uint _participantCount = WaveActiveSum(1);
                bool _isCorrect = (_participantCount == 1);
                _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
              }
              if ((counter6 == 1)) {
                break;
              }
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint _participantCount = WaveActiveSum(1);
            bool _isCorrect = (_participantCount == 6);
            _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
          }
          break;
        }
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 17)) {
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint _participantCount = WaveActiveSum(1);
              bool _isCorrect = (_participantCount == 0);
              _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
            }
            break;
          }
        case 1: {
            if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 54))) {
              if (((WaveGetLaneIndex() == 29) || (WaveGetLaneIndex() == 58))) {
                result = (result + WaveActiveMin(WaveGetLaneIndex()));
                uint _participantCount = WaveActiveSum(1);
                bool _isCorrect = (_participantCount == 0);
                _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
              }
            }
            break;
          }
        case 2: {
            for (uint i7 = 0; (i7 < 3); i7 = (i7 + 1)) {
              if ((WaveGetLaneIndex() < 3)) {
                result = (result + WaveActiveMin(result));
                uint _participantCount = WaveActiveSum(1);
                bool _isCorrect = (_participantCount == 0);
                _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
              }
              if ((WaveGetLaneIndex() < 25)) {
                result = (result + WaveActiveMin(result));
                uint _participantCount = WaveActiveSum(1);
                bool _isCorrect = (_participantCount == 0);
                _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
              }
              if ((i7 == 2)) {
                break;
              }
            }
            break;
          }
        case 3: {
            if ((WaveGetLaneIndex() < 12)) {
              if ((WaveGetLaneIndex() < 16)) {
                result = (result + WaveActiveMin(WaveGetLaneIndex()));
                uint _participantCount = WaveActiveSum(1);
                bool _isCorrect = (_participantCount == 3);
                _participant_check_sum[tid.x] = (_participant_check_sum[tid.x] + (_isCorrect ? 1 : 0));
              }
            }
            break;
          }
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_check_sum
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 64
  - Name: expected_participants
    Format: UInt32
    Stride: 4
    Data: [4, 0, 2, 2, 1, 1, 10, 2, 3, 0, 1, 2, 0, 0, 2, 1, 0, 1, 10, 1, 0, 0, 1, 0, 0, 0, 2, 0, 0, 1, 10, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 1, 1, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 1, 1, 0, 6, 0, 1, 0, 3, 0, 2, 0]
Results:
  - Result: WaveOpValidation
    Rule: BufferExact
    Actual: _participant_check_sum
    Expected: expected_participants
DescriptorSets:
  - Resources:
    - Name: _participant_check_sum
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
